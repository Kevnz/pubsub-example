{
    "project": {},
    "files": {
        "app\\login.js": {
            "name": "app\\login.js",
            "modules": {},
            "classes": {
                "Login": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app\\main.js": {
            "name": "app\\main.js",
            "modules": {},
            "classes": {
                "Main": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib\\hammer.js": {
            "name": "lib\\hammer.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Login": {
            "name": "Login",
            "shortname": "Login",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "app\\login.js",
            "line": 13,
            "description": "A Login Module",
            "params": [
                {
                    "name": "config",
                    "description": "Object literal specifying widget configuration properties.",
                    "type": "Object"
                }
            ],
            "is_constructor": 1,
            "extends": "Object"
        },
        "Main": {
            "name": "Main",
            "shortname": "Main",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "app\\main.js",
            "line": 4,
            "description": "A Main App",
            "params": [
                {
                    "name": "config",
                    "description": "Object literal specifying widget configuration properties.",
                    "type": "Object"
                }
            ],
            "is_constructor": 1,
            "extends": "Object"
        }
    },
    "classitems": [
        {
            "file": "app\\login.js",
            "line": 24,
            "description": "The initialization event",
            "itemtype": "event",
            "name": "login.init",
            "class": "Login"
        },
        {
            "file": "app\\login.js",
            "line": 28,
            "description": "The render event",
            "itemtype": "event",
            "name": "login.render",
            "class": "Login"
        },
        {
            "file": "app\\login.js",
            "line": 32,
            "description": "The log in succeeded event",
            "itemtype": "event",
            "name": "login.success",
            "class": "Login"
        },
        {
            "file": "app\\login.js",
            "line": 36,
            "description": "The log in failed event",
            "itemtype": "event",
            "name": "login.fail",
            "class": "Login"
        },
        {
            "file": "app\\main.js",
            "line": 15,
            "description": "The initialization event",
            "itemtype": "event",
            "name": "main.init",
            "class": "Main"
        },
        {
            "file": "app\\main.js",
            "line": 19,
            "description": "The render event",
            "itemtype": "event",
            "name": "main.render",
            "class": "Main"
        },
        {
            "file": "lib\\hammer.js",
            "line": 11,
            "description": "Hammer\nuse this to create instances",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 74,
            "description": "setup events to detect gestures on the document",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 100,
            "description": "create new hammer instance\nall methods should return the instance itself, so it is chainable.",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "is_constructor": 1,
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 143,
            "description": "bind events to the instance",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 158,
            "description": "unbind events to the instance",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 173,
            "description": "trigger gesture event",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 197,
            "description": "enable of disable hammer.js detection",
            "params": [
                {
                    "name": "state",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "",
                "type": "Hammer.Instance"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 208,
            "description": "this holds the last move event,\nused to fix empty touchend issue\nsee the onTouch event for an explanation",
            "type": "{Object}",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 217,
            "description": "when the mouse is hold down, this is true",
            "type": "{Boolean}",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 224,
            "description": "when touch events have been fired, this is true",
            "type": "{Boolean}",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 232,
            "description": "simple addEventListener",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "type",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 246,
            "description": "touch events with mouse fallback",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventType",
                    "description": "like Hammer.EVENT_MOVE",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 339,
            "description": "we have different events for each device/browser\ndetermine what we need and set them in the Hammer.EVENT_TYPES constant",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 363,
            "description": "create touchlist depending on the event",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "eventType",
                    "description": "used by the fakemultitouch plugin",
                    "type": "String"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 389,
            "description": "collect event data for Hammer js",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventType",
                    "description": "like Hammer.EVENT_MOVE",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 413,
            "description": "prevent the browser default actions\nmostly used to disable scrolling of the browser",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 427,
            "description": "stop bubbling the event up to its parents",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 434,
            "description": "immediately stop gesture detection\nmight be useful after a swipe was detected",
            "return": {
                "description": "",
                "type": "*"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 447,
            "description": "holds all pointers",
            "type": "{Object}",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 453,
            "description": "get a list of pointers",
            "return": {
                "description": "touchlist",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 468,
            "description": "update the position of a pointer",
            "params": [
                {
                    "name": "type",
                    "description": "Hammer.EVENT_END",
                    "type": "String"
                },
                {
                    "name": "pointerEvent",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 485,
            "description": "check if ev matches pointertype",
            "params": [
                {
                    "name": "pointerType",
                    "description": "Hammer.POINTER_MOUSE",
                    "type": "String"
                },
                {
                    "name": "ev",
                    "description": "",
                    "type": "PointerEvent"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 503,
            "description": "get events",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 514,
            "description": "reset the list",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 523,
            "description": "extend method,\nalso used for cloning when dest is an empty object",
            "params": [
                {
                    "name": "dest",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "src",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "dest",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 538,
            "description": "find if a node is in the given parent\nused for event delegation tricks",
            "params": [
                {
                    "name": "node",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "parent",
                    "description": "",
                    "type": "HTMLElement"
                }
            ],
            "return": {
                "description": "has_parent",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 556,
            "description": "get the center of all the touches",
            "params": [
                {
                    "name": "touches",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "center",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 576,
            "description": "calculate the velocity between two points",
            "params": [
                {
                    "name": "delta_time",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta_x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "delta_y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "velocity",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 591,
            "description": "calculate the angle between two coordinates",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "angle",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 604,
            "description": "angle to direction define",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "direction constant, like Hammer.DIRECTION_LEFT",
                "type": "String"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 623,
            "description": "calculate the distance between two touches",
            "params": [
                {
                    "name": "touch1",
                    "description": "",
                    "type": "Touch"
                },
                {
                    "name": "touch2",
                    "description": "",
                    "type": "Touch"
                }
            ],
            "return": {
                "description": "distance",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 636,
            "description": "calculate the scale factor between two touchLists (fingers)\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "scale",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 653,
            "description": "calculate the rotation degrees between two touchLists (fingers)",
            "params": [
                {
                    "name": "start",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "end",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "rotation",
                "type": "Number"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 669,
            "description": "boolean if the direction is vertical",
            "params": [
                {
                    "name": "direction",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "is_vertical",
                "type": "Boolean"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 679,
            "description": "stop browser default behavior with css props",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HtmlElement"
                },
                {
                    "name": "css_props",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 733,
            "description": "start Hammer.gesture detection",
            "params": [
                {
                    "name": "inst",
                    "description": "",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 757,
            "description": "Hammer.gesture detection",
            "params": [
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 801,
            "description": "clear the Hammer.gesture vars\nthis is called on endDetect, but can also be used when a final Hammer.gesture has been detected\nto stop other Hammer.gestures from being fired",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 819,
            "description": "extend eventData for Hammer.gestures",
            "params": [
                {
                    "name": "ev",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "ev",
                "type": "Object"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 867,
            "description": "register new gesture",
            "params": [
                {
                    "name": "gesture",
                    "description": "object, see gestures.js for documentation",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "gestures",
                "type": "Array"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 906,
            "description": "Custom gestures\n==============================\n\nGesture object\n--------------------\nThe object structure of a gesture:\n\n{ name: 'mygesture',\n  index: 1337,\n  defaults: {\n    mygesture_option: true\n  }\n  handler: function(type, ev, inst) {\n    // trigger gesture event\n    inst.trigger(this.name, ev);\n  }\n}",
            "params": [
                {
                    "name": "name!~YUIDOC_LINE~!this",
                    "description": "should be the name of the gesture, lowercase\nit is also being used to disable/enable the gesture per instance config.",
                    "type": "String"
                },
                {
                    "name": "index",
                    "description": "index of the gesture, where it is going to be in the stack of gestures detection\nlike when you build an gesture that depends on the drag gesture, it is a good\nidea to place it after the index of the drag gesture.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1000"
                },
                {
                    "name": "defaults",
                    "description": "default settings of the gesture. these are added to the instance settings,\nand can be overruled per instance. you can also add the name of the gesture,\nbut this is also added by default (and set to true).",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                },
                {
                    "name": "handler!~YUIDOC_LINE~!this",
                    "description": "handles the gesture detection of your custom gesture and receives the\nfollowing arguments:",
                    "type": "Function"
                },
                {
                    "name": "eventData!~YUIDOC_LINE~!",
                    "description": "event data containing the following properties:\n         timeStamp   {Number}        time the event occurred\n         target      {HTMLElement}   target element\n         touches     {Array}         touches (fingers, pointers, mouse) on the screen\n         pointerType {String}        kind of pointer that was used. matches Hammer.POINTER_MOUSE|TOUCH\n         center      {Object}        center position of the touches. contains pageX and pageY\n         deltaTime   {Number}        the total time of the touches in the screen\n         deltaX      {Number}        the delta on x axis we haved moved\n         deltaY      {Number}        the delta on y axis we haved moved\n         velocityX   {Number}        the velocity on the x\n         velocityY   {Number}        the velocity on y\n         angle       {Number}        the angle we are moving\n         direction   {String}        the direction we are moving. matches Hammer.DIRECTION_UP|DOWN|LEFT|RIGHT\n         distance    {Number}        the distance we haved moved\n         scale       {Number}        scaling of the touches, needs 2 touches\n         rotation    {Number}        rotation of the touches, needs 2 touches *\n         eventType   {String}        matches Hammer.EVENT_START|MOVE|END\n         srcEvent    {Object}        the source event, like TouchStart or MouseDown *\n         startEvent  {Object}        contains the same properties as above,\n                                     but from the first touch. this is used to calculate\n                                     distances, deltaTime, scaling etc",
                    "type": "Object"
                },
                {
                    "name": "inst!~YUIDOC_LINE~!",
                    "description": "the instance we are doing the detection for. you can get the options from\n     the inst.options object and trigger the gesture event by calling inst.trigger\n\n\nHandle gestures\n--------------------\ninside the handler you can get/set Hammer.detection.current. This is the current\ndetection session. It has the following properties",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "name!~YUIDOC_LINE~!",
                    "description": "contains the name of the gesture we have detected. it has not a real function,\n     only to check in other gestures if something is detected.\n     like in the drag gesture we set it to 'drag' and in the swipe gesture we can\n     check if the current gesture is 'drag' by accessing Hammer.detection.current.name",
                    "type": "String"
                },
                {
                    "name": "inst!~YUIDOC_LINE~!",
                    "description": "the instance we do the detection for",
                    "type": "Hammer.Instance"
                },
                {
                    "name": "startEvent!~YUIDOC_LINE~!",
                    "description": "contains the properties of the first gesture detection in this session.\n     Used for calculations about timing, distance, etc.",
                    "type": "Object"
                },
                {
                    "name": "lastEvent!~YUIDOC_LINE~!",
                    "description": "contains all the properties of the last gesture detect in this session.\n\nafter the gesture detection session has been completed (user has released the screen)\nthe Hammer.detection.current object is copied into Hammer.detection.previous,\nthis is usefull for gestures like doubletap, where you need to know if the\nprevious gesture was a tap\n\noptions that have been set by the instance can be received by calling inst.options\n\nYou can trigger a gesture event by calling inst.trigger(\"mygesture\", event).\nThe first param is the name of your gesture, the second the event argument\n\n\nRegister gestures\n--------------------\nWhen an gesture is added to the Hammer.gestures object, it is auto registered\nat the setup of the first Hammer instance. You can also call Hammer.detection.register\nmanually and pass your gesture object as a param",
                    "type": "Object"
                }
            ],
            "readonly": "",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 1013,
            "description": "Hold\nTouch stays at the same place for x time",
            "events": "hold",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 1059,
            "description": "Tap/DoubleTap\nQuick touch at a place or double at the same place",
            "events": "tap, doubletap",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 1101,
            "description": "Swipe\ntriggers swipe events when the end velocity is above the threshold",
            "events": "swipe, swipeleft, swiperight, swipeup, swipedown",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 1135,
            "description": "Drag\nMove with x fingers (default 1) around on the page. Blocking the scrolling when\nmoving left and right is a good practice. When all the drag events are blocking\nyou disable scrolling on that area.",
            "events": "drag, drapleft, dragright, dragup, dragdown",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 1234,
            "description": "Transform\nUser want to scale or rotate with 2 fingers",
            "events": "transform, pinch, pinchin, pinchout, rotate",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 1324,
            "description": "Touch\nCalled as first, tells the user has touched the screen",
            "events": "touch",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 1360,
            "description": "Release\nCalled as last, tells the user has released the screen",
            "events": "release",
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 1400,
            "description": "bind dom events\nthis overwrites addEventListener",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "eventTypes",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "",
                    "type": "Function"
                }
            ],
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 1441,
            "description": "the methods are called by the instance, but with the jquery plugin\nwe use the jquery event methods instead.",
            "this": "{Hammer.Instance}",
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 1455,
            "description": "trigger events\nthis is called by the gestures to trigger an event like 'tap'",
            "this": "{Hammer.Instance}",
            "params": [
                {
                    "name": "gesture",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "eventData",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": ""
        },
        {
            "file": "lib\\hammer.js",
            "line": 1476,
            "description": "jQuery plugin\ncreate instance of Hammer and watch for gestures,\nand when called again you can change the options",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "{}"
                }
            ],
            "return": {
                "description": "",
                "type": "JQuery"
            },
            "class": ""
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:11"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:100"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:143"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:158"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:173"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:197"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:453"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:523"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:538"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:556"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:576"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:591"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:604"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:623"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:636"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:653"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:669"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:819"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " lib\\hammer.js:867"
        },
        {
            "message": "unknown tag: events",
            "line": " lib\\hammer.js:1013"
        },
        {
            "message": "unknown tag: events",
            "line": " lib\\hammer.js:1059"
        },
        {
            "message": "unknown tag: events",
            "line": " lib\\hammer.js:1101"
        },
        {
            "message": "unknown tag: events",
            "line": " lib\\hammer.js:1135"
        },
        {
            "message": "unknown tag: events",
            "line": " lib\\hammer.js:1234"
        },
        {
            "message": "unknown tag: events",
            "line": " lib\\hammer.js:1324"
        },
        {
            "message": "unknown tag: events",
            "line": " lib\\hammer.js:1360"
        },
        {
            "message": "unknown tag: this",
            "line": " lib\\hammer.js:1441"
        },
        {
            "message": "unknown tag: this",
            "line": " lib\\hammer.js:1455"
        },
        {
            "message": "Missing item type\nHammer\nuse this to create instances",
            "line": " lib\\hammer.js:11"
        },
        {
            "message": "Missing item type\nsetup events to detect gestures on the document",
            "line": " lib\\hammer.js:74"
        },
        {
            "message": "Missing item type\ncreate new hammer instance\nall methods should return the instance itself, so it is chainable.",
            "line": " lib\\hammer.js:100"
        },
        {
            "message": "Missing item type\nbind events to the instance",
            "line": " lib\\hammer.js:143"
        },
        {
            "message": "Missing item type\nunbind events to the instance",
            "line": " lib\\hammer.js:158"
        },
        {
            "message": "Missing item type\ntrigger gesture event",
            "line": " lib\\hammer.js:173"
        },
        {
            "message": "Missing item type\nenable of disable hammer.js detection",
            "line": " lib\\hammer.js:197"
        },
        {
            "message": "Missing item type\nthis holds the last move event,\nused to fix empty touchend issue\nsee the onTouch event for an explanation",
            "line": " lib\\hammer.js:208"
        },
        {
            "message": "Missing item type\nwhen the mouse is hold down, this is true",
            "line": " lib\\hammer.js:217"
        },
        {
            "message": "Missing item type\nwhen touch events have been fired, this is true",
            "line": " lib\\hammer.js:224"
        },
        {
            "message": "Missing item type\nsimple addEventListener",
            "line": " lib\\hammer.js:232"
        },
        {
            "message": "Missing item type\ntouch events with mouse fallback",
            "line": " lib\\hammer.js:246"
        },
        {
            "message": "Missing item type\nwe have different events for each device/browser\ndetermine what we need and set them in the Hammer.EVENT_TYPES constant",
            "line": " lib\\hammer.js:339"
        },
        {
            "message": "Missing item type\ncreate touchlist depending on the event",
            "line": " lib\\hammer.js:363"
        },
        {
            "message": "Missing item type\ncollect event data for Hammer js",
            "line": " lib\\hammer.js:389"
        },
        {
            "message": "Missing item type\nprevent the browser default actions\nmostly used to disable scrolling of the browser",
            "line": " lib\\hammer.js:413"
        },
        {
            "message": "Missing item type\nstop bubbling the event up to its parents",
            "line": " lib\\hammer.js:427"
        },
        {
            "message": "Missing item type\nimmediately stop gesture detection\nmight be useful after a swipe was detected",
            "line": " lib\\hammer.js:434"
        },
        {
            "message": "Missing item type\nholds all pointers",
            "line": " lib\\hammer.js:447"
        },
        {
            "message": "Missing item type\nget a list of pointers",
            "line": " lib\\hammer.js:453"
        },
        {
            "message": "Missing item type\nupdate the position of a pointer",
            "line": " lib\\hammer.js:468"
        },
        {
            "message": "Missing item type\ncheck if ev matches pointertype",
            "line": " lib\\hammer.js:485"
        },
        {
            "message": "Missing item type\nget events",
            "line": " lib\\hammer.js:503"
        },
        {
            "message": "Missing item type\nreset the list",
            "line": " lib\\hammer.js:514"
        },
        {
            "message": "Missing item type\nextend method,\nalso used for cloning when dest is an empty object",
            "line": " lib\\hammer.js:523"
        },
        {
            "message": "Missing item type\nfind if a node is in the given parent\nused for event delegation tricks",
            "line": " lib\\hammer.js:538"
        },
        {
            "message": "Missing item type\nget the center of all the touches",
            "line": " lib\\hammer.js:556"
        },
        {
            "message": "Missing item type\ncalculate the velocity between two points",
            "line": " lib\\hammer.js:576"
        },
        {
            "message": "Missing item type\ncalculate the angle between two coordinates",
            "line": " lib\\hammer.js:591"
        },
        {
            "message": "Missing item type\nangle to direction define",
            "line": " lib\\hammer.js:604"
        },
        {
            "message": "Missing item type\ncalculate the distance between two touches",
            "line": " lib\\hammer.js:623"
        },
        {
            "message": "Missing item type\ncalculate the scale factor between two touchLists (fingers)\nno scale is 1, and goes down to 0 when pinched together, and bigger when pinched out",
            "line": " lib\\hammer.js:636"
        },
        {
            "message": "Missing item type\ncalculate the rotation degrees between two touchLists (fingers)",
            "line": " lib\\hammer.js:653"
        },
        {
            "message": "Missing item type\nboolean if the direction is vertical",
            "line": " lib\\hammer.js:669"
        },
        {
            "message": "Missing item type\nstop browser default behavior with css props",
            "line": " lib\\hammer.js:679"
        },
        {
            "message": "Missing item type\nstart Hammer.gesture detection",
            "line": " lib\\hammer.js:733"
        },
        {
            "message": "Missing item type\nHammer.gesture detection",
            "line": " lib\\hammer.js:757"
        },
        {
            "message": "Missing item type\nclear the Hammer.gesture vars\nthis is called on endDetect, but can also be used when a final Hammer.gesture has been detected\nto stop other Hammer.gestures from being fired",
            "line": " lib\\hammer.js:801"
        },
        {
            "message": "Missing item type\nextend eventData for Hammer.gestures",
            "line": " lib\\hammer.js:819"
        },
        {
            "message": "Missing item type\nregister new gesture",
            "line": " lib\\hammer.js:867"
        },
        {
            "message": "Missing item type\nCustom gestures\n==============================\n\nGesture object\n--------------------\nThe object structure of a gesture:\n\n{ name: 'mygesture',\n  index: 1337,\n  defaults: {\n    mygesture_option: true\n  }\n  handler: function(type, ev, inst) {\n    // trigger gesture event\n    inst.trigger(this.name, ev);\n  }\n}",
            "line": " lib\\hammer.js:906"
        },
        {
            "message": "Missing item type\nHold\nTouch stays at the same place for x time",
            "line": " lib\\hammer.js:1013"
        },
        {
            "message": "Missing item type\nTap/DoubleTap\nQuick touch at a place or double at the same place",
            "line": " lib\\hammer.js:1059"
        },
        {
            "message": "Missing item type\nSwipe\ntriggers swipe events when the end velocity is above the threshold",
            "line": " lib\\hammer.js:1101"
        },
        {
            "message": "Missing item type\nDrag\nMove with x fingers (default 1) around on the page. Blocking the scrolling when\nmoving left and right is a good practice. When all the drag events are blocking\nyou disable scrolling on that area.",
            "line": " lib\\hammer.js:1135"
        },
        {
            "message": "Missing item type\nTransform\nUser want to scale or rotate with 2 fingers",
            "line": " lib\\hammer.js:1234"
        },
        {
            "message": "Missing item type\nTouch\nCalled as first, tells the user has touched the screen",
            "line": " lib\\hammer.js:1324"
        },
        {
            "message": "Missing item type\nRelease\nCalled as last, tells the user has released the screen",
            "line": " lib\\hammer.js:1360"
        },
        {
            "message": "Missing item type\nbind dom events\nthis overwrites addEventListener",
            "line": " lib\\hammer.js:1400"
        },
        {
            "message": "Missing item type\nthe methods are called by the instance, but with the jquery plugin\nwe use the jquery event methods instead.",
            "line": " lib\\hammer.js:1441"
        },
        {
            "message": "Missing item type\ntrigger events\nthis is called by the gestures to trigger an event like 'tap'",
            "line": " lib\\hammer.js:1455"
        },
        {
            "message": "Missing item type\njQuery plugin\ncreate instance of Hammer and watch for gestures,\nand when called again you can change the options",
            "line": " lib\\hammer.js:1476"
        }
    ]
}